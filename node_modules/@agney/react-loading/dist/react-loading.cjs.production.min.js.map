{"version":3,"file":"react-loading.cjs.production.min.js","sources":["../src/LoaderContext.tsx","../src/useLoading.tsx"],"sourcesContent":["import React, { createContext, ReactElement, ReactNode, useContext, useMemo } from 'react';\n\ninterface ContextProps {\n  indicator: ReactElement | null;\n}\n\ninterface ProviderProps extends ContextProps {\n  children: ReactNode;\n}\n\nconst defaultValue = {\n  indicator: null,\n};\n\nconst LoaderContext = createContext<ContextProps>(defaultValue);\nexport const useLoaderContext = () => useContext(LoaderContext);\n\nexport const LoaderProvider = ({ indicator, children }: ProviderProps) => {\n  const value = useMemo(\n    () => ({\n      indicator: indicator,\n    }),\n    [indicator]\n  );\n\n  return (\n    <LoaderContext.Provider value={value}>{children}</LoaderContext.Provider>\n  );\n};\n","import { cloneElement, ReactElement, isValidElement } from 'react';\nimport invariant from 'tiny-invariant';\n\nimport { useLoaderContext } from './LoaderContext';\n\ninterface Props {\n  loading?: boolean;\n  indicator?: ReactElement | null;\n  loaderProps?: {\n    /** Description of progressbar and what it is loading */\n    valueText?: string;\n  }\n}\n\ntype AriaLive = 'off' | 'assertive' | 'polite' | undefined;\n\n/**\n * Hook returning Indicator element according to loading argument.\n * @example const { containerProps, indicatorEl } = useLoading({ loading: true })\n */\nexport function useLoading({ loading = false, indicator, loaderProps = {} }: Props) {\n  const containerProps = {\n    'aria-busy': loading,\n    'aria-live': 'polite' as AriaLive,\n  };\n\n  const loaderContext = useLoaderContext();\n  const indicatorEl = indicator ?? loaderContext?.indicator;\n  invariant(isValidElement(indicatorEl), 'Expected a valid React element as indicator');\n\n  const accessibleLoaderProps = (() => {\n    const { valueText, ...rest } = loaderProps;\n    return {\n      role: 'progressbar',\n      'aria-valuetext': valueText,\n      ...rest,\n    }\n  })();\n  const accessibleIndicator = indicatorEl ? cloneElement(indicatorEl, accessibleLoaderProps) : null;\n\n  return {\n    containerProps,\n    indicatorEl: loading ? accessibleIndicator : null,\n  };\n}\n"],"names":["LoaderContext","createContext","indicator","children","value","useMemo","React","Provider","loading","loaderProps","containerProps","loaderContext","useContext","indicatorEl","isValidElement","invariant","accessibleLoaderProps","role","valueText","accessibleIndicator","cloneElement"],"mappings":"sZAUA,IAIMA,EAAgBC,gBAJD,CACnBC,UAAW,m8iBAMiB,gBAAGA,IAAAA,UAAWC,IAAAA,SACpCC,EAAQC,WACZ,iBAAO,CACLH,UAAWA,KAEb,CAACA,WAIDI,gBAACN,EAAcO,UAASH,MAAOA,GAAQD,2pBCNdK,QAAAA,gBAAiBN,IAAAA,cAAWO,YAAAA,aAAc,KAC/DC,EAAiB,aACRF,cACA,UAGTG,EDX8BC,aAAWZ,GCYzCa,QAAcX,EAAAA,QAAaS,SAAAA,EAAeT,UACtCY,iBAAeD,IAAzBE,UAEMC,KAGFC,KAAM,+BAFuBR,EAAvBS,8IAAuBT,kBAO3BU,EAAsBN,EAAcO,eAAaP,EAAaG,GAAyB,WAEtF,CACLN,eAAAA,EACAG,YAAaL,EAAUW,EAAsB"}